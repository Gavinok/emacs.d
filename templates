;; -*- mode: lisp -*-

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

c-mode

(if "if ("  (p "true") ") {" n> r> (p "true") n "}")
(print "printf(" (p "\"The value of ___ is\"" text) (r ", ")")")
(for "for (" "int" (p "i" var) "=" (p "0") "; "
     (s var) "< " (p "max" max) "; "
     (s var) "++" ")"
     n> (p "/* your code here*/h")
     n "}")
(main "int main(int argc, char* argv[])"n"{" n> (r "/*Your Code Here*/") n"}")

python-mode

(for "for " (p "needle") " in " (p "heystack") ":"n>
     (p "# code goes here"))
(if "if " (p "condition" var) ":"n>
     (p "# code goes here"))

latex-mode

(begin "\\begin{" (s env) "}" > n> r> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" p "}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")

emacs-lisp-mode

(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(let "(let (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive)" n> r> ")")

java-mode

(class "public class "
       (p (file-name-base (or (buffer-file-name) (buffer-name))))
       " {" n> r> n "}")
(print "System.out.println(" (r "What to print" print) ");")
(debug "System.out.println(""\"The value of "
       (p "var") " is \" + "
       (r "var" print) ");")

;; (switch
;;  "switch ("(p "{{+condition+}}")") {"n>
;;  "case " (p "{{++case1+}}")": "(p "{{+//code+}}")n>
;;  "break;"n>
;;  "case " (p "{{+case2+}}")": "(p "{{+//code+}}")n>
;;  "break;"n>
;;  "default: "(p "{{+//code+}}")n>
;;  "break;"n>"}")

org-mode

(title "#+title: " p n "#+author: Daniel Mendler" n "#+language: en" n n)
(quote "#+begin_quote" n> r> n> "#+end_quote")
(example "#+begin_example" n> r> n> "#+end_example")
(center "#+begin_center" n> r> n> "#+end_center")
(comment "#+begin_comment" n> r> n> "#+end_comment")
(verse "#+begin_verse" n> r> n> "#+end_verse")
(src "#+begin_src " p n> r> n> "#+end_src")
(elisp "#+begin_src emacs-lisp" n> r> n "#+end_src")
(java "#+begin_src java" n> r> n "#+end_src")

sh-mode

(env "#!/bin/env sh")
(for "for " (p "needle") " in " (p "haystack")"; do" n>
     (p "#code")n
     "done")
(if "if [ " (p "condition")" ]; then"n> (r "#code")n "fi")
(case "case "(p "var")" in"
      n> (p "1") ")" n>(p "# code")";;"
      n> (p "2") ")" n>(p "# code")";;"
      n>    "*)"     n>(p "# default")";;"
      n"esac")

(readfile "while IFS= read -r line || [ -n "(p "\"$line\"")" ]; do"n>
          (p "printf '%s\\n' \"$line\"")n
          "done < \"file\"")

(while "while [ "(p "\"$start\"") " -le " (p "\"$end\"")" ]; do"n>
       (p "#code")n
       "done")
